1. Создать класс MyMath
1.1. В классе MyMath создать статический метод avgDoubleArayExm1, принимающий массив
типа double и возвращающий среднее арифметическое этого массива. Предусмотреть
исключительные ситуации NullPointerException и ArithmeticException путем генерирования их
самостоятельно в необходимом случае. Продемонстрировать работу метода на заполненном,
пустом и null массиве.
1.2. В классе MyMath создать статический метод avgDoubleArayExm2, принимающий массив
типа double и возвращающий среднее арифметическое этого массива. Создать собственные
классы для генерирования исключительных ситуаций (DivideByZeroException и
NullDoubleArrayException) наследующие от Exception. Продемонстрировать работу метода на
заполненном, пустом и null массиве.
1.3. В классе MyMath создать вложенный статический класс Factorial с полем value и методом
getFactorial(), вычисляющим и возвращающим значение факториала числа value. В классе не
реализовывать конструкторы. Проинициализировать value значением 1. Создать сеттер и
геттер
для value. Создать собственный класс исключение NegativeFactorialValueException, наследующий
от Exception. В сеттере предусмотреть генерацию исключения NegativeFactorialValueException
и обработать его по месту вызова метода. Создать объект класса Fatorial попытаться установить
для него различные значения.
1.4. Дополнить класс Factorial конструкторами. Создать собственный класс для обработки
исключения CreateFactorialException. В конструкторе с параметрами отловить
исключительную
ситуацию NegativeFactorialValueException, сгенерировать ее и обработать, сгенерировав
CreateFactorialException. Для исключения CreateFactorialException указать причину
NegativeFactorialValueException. NegativeFactorialValueException обработать по месту вызова
(по месту создания объекта). Попытаться создать объекты класса Fatorial с различными
значениями.
1.5. В классе MyMath cоздать создать вложенный статический класс Equation с полями a, b, c.
Создать необходимый набор методов для решения квадратного уравнения. Создать свои
исключения для существования объекта квадратного уравнения (a!=0).
2. Создать класс Pet c полями кличка и возраст. Создать класс обертку PetList, реализующий
массив питомцев Pet фиксированной максимальной длины = 5. Для класса PetList
определить методы добавления питомца в список, удаления питомца из списка по индексу,
получения информации о питомце по индексу, вывода информации обо всех питомцах. При
реализации класса PetList предусмотреть возможные исключительные ситуации (например,
невозможность добавления животного при полном списке, попытка обращения к животному по
некорректному индексу). Продемонстрировать работу методов класса PetList
3. Создать класс Student с полями имя и средний балл.
3.1. Предусмотреть обработку исключительных ситуаций при создании объекта с
некорректными значениями полей, а также при попытке изменить значения полей у
существующего объекта на некорректные.
3.2. Имя не должно быть null
3.3. Имя не должно содержать менее двух символов.
3.4. Средний балл не может быть отрицательным
3.5. Средний балл должен быть в диапазоне от 1 до 10.
3.6. Создать собственные классы исключений: IncorrectNameException,

IncorrectAvgPointException, NegativeAvgPointException, CreateStudentException.
3.7. В конструкторе с параметрами сгенерировать исключения при получении некорректного
имени NullPointerException или IncorrectNameException.
3.8. В конструкторе с параметрами сгенерировать исключения при получении некорректного
среднего балла NegativeAvgPointException или IncorrectAvgPointException.
3.9. При наличии исключения отловить его в конструкторе и сгенерировать
CreateStudentException с указанием причины.
3.10. В сеттерах сгенерировать соответствующие исключения при получении некорректного
значения, отловить и сгенерировать(пробросить) IllegalArgumentException с указанием причины
3.11. В классе Student создать статический метод getStudentFromConsole(), запрашивающий
информацию(имя и средний балл) у пользователя с клавиатуры и возвращающий объект Student
в случае корректно введенных данных, иначе генерирующий исключение CreateStudentException
4. Создать класс с информацией о сотрудниках (имя и зарплата).
4.1. Создать текстовый файл in.txt в папке src с информацией о сотрудниках, например:
Igor 500
Vasya 700
Fedya 650
4.2. Используя классы File и Scanner осуществить считывание информации и создание объектов
на основании считанной информации. Организовать обработку исключительных ситуаций
Для закрытия доступа к ресурсам использовать finally
4.3. Используя классы File и Scanner осуществить считывание информации и создание объектов
на основании считанной информации. Организовать обработку исключительных ситуаций
Для закрытия доступа к ресурсам использовать try-with-resources